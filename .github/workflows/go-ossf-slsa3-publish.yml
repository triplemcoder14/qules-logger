# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow lets you compile your Go project using a SLSA3 compliant builder.
# This workflow will generate a so-called "provenance" file describing the steps
# that were performed to generate the final binary.
# The project is an initiative of the OpenSSF (openssf.org) and is developed at
# https://github.com/slsa-framework/slsa-github-generator.
# The provenance file can be verified using https://github.com/slsa-framework/slsa-verifier.
# For more information about SLSA and how it improves the supply-chain, visit slsa.dev.

name: SLSA Go releaser
on:
  workflow_dispatch:
  release:
    types: [created]

permissions: read-all

jobs:
  # ========================================================================================================================================
  #     Prerequesite: Create a .slsa-goreleaser.yml in the root directory of your project.
  #       See format in https://github.com/slsa-framework/slsa-github-generator/blob/main/internal/builders/go/README.md#configuration-file
  #=========================================================================================================================================
  build:
    permissions:
      id-token: write # To sign.
      contents: write # To upload release assets.
      actions: read   # To read workflow path.
    uses: slsa-framework/slsa-github-generator/.github/workflows/builder_go_slsa3.yml@v1.4.0
    with:
      go-version: 1.17
      # =============================================================================================================
      #     Optional: For more options, see https://github.com/slsa-framework/slsa-github-generator#golang-projects
      # =============================================================================================================
-----
name: OSSF SLSA3 Publish

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: # Allow manual trigger of workflow

jobs:
  build:
    name: Build Go Project
    runs-on: ubuntu-latest

    permissions:
      id-token: write # Required for OIDC-based provenance signing
      contents: read

    steps:
      # Checkout the repository code
      - name: Checkout source code
        uses: actions/checkout@v3

      # Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21' # Specify Go version

      # Verify dependencies with 'go mod verify'
      - name: Verify dependencies
        run: go mod verify

      # Run tests
      - name: Run tests
        run: go test ./...

      # Build the Go binary
      - name: Build Go binary
        run: go build -o myapp ./...

  provenance:
    name: Generate Provenance
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      # Install Gitsign for signing commits
      - name: Install Gitsign
        run: |
          curl -Lo gitsign https://github.com/sigstore/gitsign/releases/latest/download/gitsign-linux-amd64
          chmod +x ./gitsign
          sudo mv ./gitsign /usr/local/bin/

      # Generate provenance with OIDC and Gitsign
      - name: Generate provenance
        run: |
          echo "Generating provenance for the build..."
          gitsign sign --message "Build provenance for commit ${{ github.sha }}" --output provenance.txt

  release:
    name: Publish Signed Artifacts
    runs-on: ubuntu-latest
    needs: [build, provenance]

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      # Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      # Build Go project for multiple platforms
      - name: Build for multiple platforms
        run: |
          GOOS=linux GOARCH=amd64 go build -o myapp-linux-amd64 ./...
          GOOS=darwin GOARCH=amd64 go build -o myapp-darwin-amd64 ./...

      # Upload artifacts to GitHub release
      - name: Upload Release Assets
        uses: actions/upload-artifact@v3
        with:
          name: myapp-binaries
          path: |
            ./myapp-linux-amd64
            ./myapp-darwin-amd64
          retention-days: 1

      # Sign the artifacts using Cosign
      - name: Sign artifacts
        run: |
          COSIGN_EXPERIMENTAL=1 cosign sign-blob --key cosign.key ./myapp-linux-amd64
          COSIGN_EXPERIMENTAL=1 cosign sign-blob --key cosign.key ./myapp-darwin-amd64

